
constructors.o:     file format pe-x86-64


Disassembly of section .text:

0000000000000000 <_Z6addAlliz>:

    //void setX(int x) {this->x = x;}

};

int addAll(int n, ...) {
   0:	55                   	push   rbp
   1:	48 89 e5             	mov    rbp,rsp
   4:	48 83 ec 10          	sub    rsp,0x10
   8:	48 89 55 18          	mov    QWORD PTR [rbp+0x18],rdx
   c:	4c 89 45 20          	mov    QWORD PTR [rbp+0x20],r8
  10:	4c 89 4d 28          	mov    QWORD PTR [rbp+0x28],r9
  14:	89 4d 10             	mov    DWORD PTR [rbp+0x10],ecx
    va_list vl;
    va_start(vl, n);
  17:	48 8d 45 18          	lea    rax,[rbp+0x18]
  1b:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
    int first = va_arg(vl, int);
  1f:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  23:	48 8d 50 08          	lea    rdx,[rax+0x8]
  27:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
  2b:	8b 00                	mov    eax,DWORD PTR [rax]
  2d:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
    int second = va_arg(vl, int);
  30:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  34:	48 8d 50 08          	lea    rdx,[rax+0x8]
  38:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
  3c:	8b 00                	mov    eax,DWORD PTR [rax]
  3e:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
    va_end(vl);
    return first;
  41:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
}
  44:	48 83 c4 10          	add    rsp,0x10
  48:	5d                   	pop    rbp
  49:	c3                   	ret    

000000000000004a <main>:

int main(int argc, char **argv) {
  4a:	55                   	push   rbp
  4b:	48 89 e5             	mov    rbp,rsp
  4e:	48 83 ec 40          	sub    rsp,0x40
  52:	89 4d 10             	mov    DWORD PTR [rbp+0x10],ecx
  55:	48 89 55 18          	mov    QWORD PTR [rbp+0x18],rdx
  59:	e8 00 00 00 00       	call   5e <main+0x14>
    //p->sayHi("topher");
    //p->sayHi(20);
    //p->sayHi(20L);
    //p->sayHi(20, 30);

    Point2 p;
  5e:	48 8d 45 f0          	lea    rax,[rbp-0x10]
  62:	48 89 c1             	mov    rcx,rax
  65:	e8 00 00 00 00       	call   6a <main+0x20>
    Point3 q;
  6a:	48 8d 45 e0          	lea    rax,[rbp-0x20]
  6e:	48 89 c1             	mov    rcx,rax
  71:	e8 00 00 00 00       	call   76 <main+0x2c>
    //Point3 py(59, 2);

    cout << p.getX() << endl;
  76:	48 8d 45 f0          	lea    rax,[rbp-0x10]
  7a:	48 89 c1             	mov    rcx,rax
  7d:	e8 00 00 00 00       	call   82 <main+0x38>
  82:	89 c2                	mov    edx,eax
  84:	48 8d 0d 00 00 00 00 	lea    rcx,[rip+0x0]        # 8b <main+0x41>
  8b:	e8 00 00 00 00       	call   90 <main+0x46>
  90:	48 8d 15 00 00 00 00 	lea    rdx,[rip+0x0]        # 97 <main+0x4d>
  97:	48 89 c1             	mov    rcx,rax
  9a:	e8 00 00 00 00       	call   9f <main+0x55>
    cout << q.getX() << endl;
  9f:	48 8d 45 e0          	lea    rax,[rbp-0x20]
  a3:	48 89 c1             	mov    rcx,rax
  a6:	e8 00 00 00 00       	call   ab <main+0x61>
  ab:	89 c2                	mov    edx,eax
  ad:	48 8d 0d 00 00 00 00 	lea    rcx,[rip+0x0]        # b4 <main+0x6a>
  b4:	e8 00 00 00 00       	call   b9 <main+0x6f>
  b9:	48 8d 15 00 00 00 00 	lea    rdx,[rip+0x0]        # c0 <main+0x76>
  c0:	48 89 c1             	mov    rcx,rax
  c3:	e8 00 00 00 00       	call   c8 <main+0x7e>
//p.init(3, 4);
//cout << p.getX() << endl;

//Point q;

}
  c8:	b8 00 00 00 00       	mov    eax,0x0
  cd:	48 83 c4 40          	add    rsp,0x40
  d1:	5d                   	pop    rbp
  d2:	c3                   	ret    

00000000000000d3 <__tcf_0>:
  extern wostream wclog;	/// Linked to standard error (buffered)
#endif
  //@}

  // For construction of filebuffers for cout, cin, cerr, clog et. al.
  static ios_base::Init __ioinit;
  d3:	55                   	push   rbp
  d4:	48 89 e5             	mov    rbp,rsp
  d7:	48 83 ec 20          	sub    rsp,0x20
  db:	48 8d 0d 00 00 00 00 	lea    rcx,[rip+0x0]        # e2 <__tcf_0+0xf>
  e2:	e8 00 00 00 00       	call   e7 <__tcf_0+0x14>
  e7:	90                   	nop
  e8:	48 83 c4 20          	add    rsp,0x20
  ec:	5d                   	pop    rbp
  ed:	c3                   	ret    

00000000000000ee <_Z41__static_initialization_and_destruction_0ii>:
  ee:	55                   	push   rbp
  ef:	48 89 e5             	mov    rbp,rsp
  f2:	48 83 ec 20          	sub    rsp,0x20
  f6:	89 4d 10             	mov    DWORD PTR [rbp+0x10],ecx
  f9:	89 55 18             	mov    DWORD PTR [rbp+0x18],edx
  fc:	83 7d 10 01          	cmp    DWORD PTR [rbp+0x10],0x1
 100:	75 22                	jne    124 <_Z41__static_initialization_and_destruction_0ii+0x36>
 102:	81 7d 18 ff ff 00 00 	cmp    DWORD PTR [rbp+0x18],0xffff
 109:	75 19                	jne    124 <_Z41__static_initialization_and_destruction_0ii+0x36>
 10b:	48 8d 0d 00 00 00 00 	lea    rcx,[rip+0x0]        # 112 <_Z41__static_initialization_and_destruction_0ii+0x24>
 112:	e8 00 00 00 00       	call   117 <_Z41__static_initialization_and_destruction_0ii+0x29>
 117:	48 8d 0d b5 ff ff ff 	lea    rcx,[rip+0xffffffffffffffb5]        # d3 <__tcf_0>
 11e:	e8 00 00 00 00       	call   123 <_Z41__static_initialization_and_destruction_0ii+0x35>
 123:	90                   	nop
 124:	48 83 c4 20          	add    rsp,0x20
 128:	5d                   	pop    rbp
 129:	c3                   	ret    

000000000000012a <_GLOBAL__sub_I__Z6addAlliz>:
 12a:	55                   	push   rbp
 12b:	48 89 e5             	mov    rbp,rsp
 12e:	48 83 ec 20          	sub    rsp,0x20
 132:	ba ff ff 00 00       	mov    edx,0xffff
 137:	b9 01 00 00 00       	mov    ecx,0x1
 13c:	e8 ad ff ff ff       	call   ee <_Z41__static_initialization_and_destruction_0ii>
 141:	90                   	nop
 142:	48 83 c4 20          	add    rsp,0x20
 146:	5d                   	pop    rbp
 147:	c3                   	ret    
 148:	90                   	nop
 149:	90                   	nop
 14a:	90                   	nop
 14b:	90                   	nop
 14c:	90                   	nop
 14d:	90                   	nop
 14e:	90                   	nop
 14f:	90                   	nop

Disassembly of section .text$_ZN6Point2C1Ev:

0000000000000000 <_ZN6Point2C1Ev>:
    int x = 22;
    int y = 33;

public:

    Point2() {
   0:	55                   	push   rbp
   1:	48 89 e5             	mov    rbp,rsp
   4:	48 89 4d 10          	mov    QWORD PTR [rbp+0x10],rcx
   8:	48 8b 45 10          	mov    rax,QWORD PTR [rbp+0x10]
   c:	c7 00 16 00 00 00    	mov    DWORD PTR [rax],0x16
  12:	48 8b 45 10          	mov    rax,QWORD PTR [rbp+0x10]
  16:	c7 40 04 21 00 00 00 	mov    DWORD PTR [rax+0x4],0x21
    }
  1d:	5d                   	pop    rbp
  1e:	c3                   	ret    
  1f:	90                   	nop

Disassembly of section .text$_ZN6Point24getXEv:

0000000000000000 <_ZN6Point24getXEv>:

    int getX() {
   0:	55                   	push   rbp
   1:	48 89 e5             	mov    rbp,rsp
   4:	48 89 4d 10          	mov    QWORD PTR [rbp+0x10],rcx
        return x;
   8:	48 8b 45 10          	mov    rax,QWORD PTR [rbp+0x10]
   c:	8b 00                	mov    eax,DWORD PTR [rax]
    }
   e:	5d                   	pop    rbp
   f:	c3                   	ret    

Disassembly of section .text$_ZN6Point3C1Ev:

0000000000000000 <_ZN6Point3C1Ev>:
class Point3 {
public:
    int x;
    int y;

    Point3() {
   0:	55                   	push   rbp
   1:	48 89 e5             	mov    rbp,rsp
   4:	48 89 4d 10          	mov    QWORD PTR [rbp+0x10],rcx
        x = 44;
   8:	48 8b 45 10          	mov    rax,QWORD PTR [rbp+0x10]
   c:	c7 00 2c 00 00 00    	mov    DWORD PTR [rax],0x2c
        y = 45;
  12:	48 8b 45 10          	mov    rax,QWORD PTR [rbp+0x10]
  16:	c7 40 04 2d 00 00 00 	mov    DWORD PTR [rax+0x4],0x2d
    }
  1d:	5d                   	pop    rbp
  1e:	c3                   	ret    
  1f:	90                   	nop

Disassembly of section .text$_ZN6Point34getXEv:

0000000000000000 <_ZN6Point34getXEv>:

    int getX() {
   0:	55                   	push   rbp
   1:	48 89 e5             	mov    rbp,rsp
   4:	48 89 4d 10          	mov    QWORD PTR [rbp+0x10],rcx
        return x;
   8:	48 8b 45 10          	mov    rax,QWORD PTR [rbp+0x10]
   c:	8b 00                	mov    eax,DWORD PTR [rax]
    }
   e:	5d                   	pop    rbp
   f:	c3                   	ret    
